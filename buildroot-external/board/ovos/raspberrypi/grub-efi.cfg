serial --unit=0 --speed=115200 --word=8 --parity=no --stop=1
set timeout=3
set timeout_style=menu

set menu_color_normal=white/black
set menu_color_highlight=white/red

set rootfs="A"
set ustate=0

# Load GRUB environment variables
load_env -f /EFI/BOOT/grub.env

# Reset or decrement boot counter based on 'ustate'
if [ "${ustate}" != "1" ]; then
    set boot_counter=3
else
    if [ -z "${boot_counter}" ]; then
        set boot_counter=2
    else
        if [ "${boot_counter}" == "1" ]; then
            set boot_counter=0
        elif [ "${boot_counter}" == "2" ]; then
            set boot_counter=1
        elif [ "${boot_counter}" == "3" ]; then
            set boot_counter=2
        fi
    fi
fi

# Check if boot counter is '0' which means fallback is needed
if [ "${boot_counter}" == "0" ]; then
    set ustate=3
    # Swap the 'rootfs' variable to the other partition, simulating a fallback
    if [ "${rootfs}" == "A" ]; then
        set rootfs="B"
        set rootfs_status_A="Fail"
        set rootfs_status_B="Fallback"
    else
        set rootfs="A"
        set rootfs_status_A="Fallback"
        set rootfs_status_B="Fail"
    fi
    set boot_counter=3 # reset boot counter after fallback
else
    # Determine the default boot entry and set status messages based on 'rootfs'
    if [ "${rootfs}" == "A" ]; then
        set default=0
        set rootfs_status_A="Default"
        set rootfs_status_B="Inactive"
    elif [ "${rootfs}" == "B" ]; then
        set default=1
        set rootfs_status_A="Inactive"
        set rootfs_status_B="Default"
    fi

    # Adjust status based on boot attempt
    if [ "${ustate}" == "1" ]; then
        if [ "${rootfs}" == "A" ]; then
            set rootfs_status_A="Attempt ${boot_counter}"
        else
            set rootfs_status_B="Attempt ${boot_counter}"
        fi
    fi
fi

default_cmdline="fsck.repair=yes zram.enabled=1 zram.num_devices=3 logo.nologo systemd.unified_cgroup_hierarchy=1 cgroup_enable=cpuset cgroup_memory=1 $boot_condition rootwait"
file_env -f ($root)/cmdline.txt cmdline

regexp --set 1:boothd (.+),.+ ${root}

# Save all changes to necessary environment variables at once
save_env -f /EFI/BOOT/grub.env ustate boot_counter rootfs

menuentry "OpenVoiceOS - Slot A ${rootfs_status_A}" {
  linux (${boothd},gpt2)/boot/kernel root=PARTUUID=c0932a41-44cf-463b-8152-d43188553ed4 rootrw=PARTUUID=f1326040-5236-40eb-b683-aaa100a9afcf init=/init $default_cmdline $cmdline
}

menuentry "OpenVoiceOS - Slot B ${rootfs_status_B}" {
  linux (${boothd},gpt3)/boot/kernel root=PARTUUID=3adea996-45ad-4928-920e-ffb5aedd00cb rootrw=PARTUUID=f1326040-5236-40eb-b683-aaa100a9afcf init=/init $default_cmdline $cmdline
}

menuentry "OpenVoiceOS - Slot A (Rescue shell)" {
  linux (${boothd},gpt2)/boot/kernel root=PARTUUID=c0932a41-44cf-463b-8152-d43188553ed4 ro $default_cmdline $cmdline systemd.unit=rescue.target
}

menuentry "OpenVoiceOS - Slot B (Rescue shell)" {
  linux (${boothd},gpt3)/boot/kernel root=PARTUUID=3adea996-45ad-4928-920e-ffb5aedd00cb ro $default_cmdline $cmdline systemd.unit=rescue.target
}
